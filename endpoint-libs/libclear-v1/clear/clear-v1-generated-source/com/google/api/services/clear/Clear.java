/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-08-07 19:00:49 UTC)
 * on 2013-08-09 at 00:29:44 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.clear;

/**
 * Service definition for Clear (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ClearRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Clear extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.15.0-rc of the  library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://testapi-16.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "clear/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Clear(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Clear(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "clearAll".
   *
   * This request holds the parameters needed by the the clear server.  After setting any optional
   * parameters, call the {@link ClearAll#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ClearAll clearAll() throws java.io.IOException {
    ClearAll result = new ClearAll();
    initialize(result);
    return result;
  }

  public class ClearAll extends ClearRequest<Void> {

    private static final String REST_PATH = "Clear";

    /**
     * Create a request for the method "clearAll".
     *
     * This request holds the parameters needed by the the clear server.  After setting any optional
     * parameters, call the {@link ClearAll#execute()} method to invoke the remote operation. <p>
     * {@link
     * ClearAll#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ClearAll() {
      super(Clear.this, "GET", REST_PATH, null, Void.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ClearAll setAlt(java.lang.String alt) {
      return (ClearAll) super.setAlt(alt);
    }

    @Override
    public ClearAll setFields(java.lang.String fields) {
      return (ClearAll) super.setFields(fields);
    }

    @Override
    public ClearAll setKey(java.lang.String key) {
      return (ClearAll) super.setKey(key);
    }

    @Override
    public ClearAll setOauthToken(java.lang.String oauthToken) {
      return (ClearAll) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearAll setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearAll) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearAll setQuotaUser(java.lang.String quotaUser) {
      return (ClearAll) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearAll setUserIp(java.lang.String userIp) {
      return (ClearAll) super.setUserIp(userIp);
    }

    @Override
    public ClearAll set(String parameterName, Object value) {
      return (ClearAll) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "clearMedal".
   *
   * This request holds the parameters needed by the the clear server.  After setting any optional
   * parameters, call the {@link ClearMedal#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ClearMedal clearMedal() throws java.io.IOException {
    ClearMedal result = new ClearMedal();
    initialize(result);
    return result;
  }

  public class ClearMedal extends ClearRequest<Void> {

    private static final String REST_PATH = "clearMedal";

    /**
     * Create a request for the method "clearMedal".
     *
     * This request holds the parameters needed by the the clear server.  After setting any optional
     * parameters, call the {@link ClearMedal#execute()} method to invoke the remote operation. <p>
     * {@link
     * ClearMedal#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ClearMedal() {
      super(Clear.this, "GET", REST_PATH, null, Void.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ClearMedal setAlt(java.lang.String alt) {
      return (ClearMedal) super.setAlt(alt);
    }

    @Override
    public ClearMedal setFields(java.lang.String fields) {
      return (ClearMedal) super.setFields(fields);
    }

    @Override
    public ClearMedal setKey(java.lang.String key) {
      return (ClearMedal) super.setKey(key);
    }

    @Override
    public ClearMedal setOauthToken(java.lang.String oauthToken) {
      return (ClearMedal) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearMedal setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearMedal) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearMedal setQuotaUser(java.lang.String quotaUser) {
      return (ClearMedal) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearMedal setUserIp(java.lang.String userIp) {
      return (ClearMedal) super.setUserIp(userIp);
    }

    @Override
    public ClearMedal set(String parameterName, Object value) {
      return (ClearMedal) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "clearMedalsType".
   *
   * This request holds the parameters needed by the the clear server.  After setting any optional
   * parameters, call the {@link ClearMedalsType#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ClearMedalsType clearMedalsType() throws java.io.IOException {
    ClearMedalsType result = new ClearMedalsType();
    initialize(result);
    return result;
  }

  public class ClearMedalsType extends ClearRequest<Void> {

    private static final String REST_PATH = "clearMedalsType";

    /**
     * Create a request for the method "clearMedalsType".
     *
     * This request holds the parameters needed by the the clear server.  After setting any optional
     * parameters, call the {@link ClearMedalsType#execute()} method to invoke the remote operation.
     * <p> {@link ClearMedalsType#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
     * lientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @since 1.13
     */
    protected ClearMedalsType() {
      super(Clear.this, "GET", REST_PATH, null, Void.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ClearMedalsType setAlt(java.lang.String alt) {
      return (ClearMedalsType) super.setAlt(alt);
    }

    @Override
    public ClearMedalsType setFields(java.lang.String fields) {
      return (ClearMedalsType) super.setFields(fields);
    }

    @Override
    public ClearMedalsType setKey(java.lang.String key) {
      return (ClearMedalsType) super.setKey(key);
    }

    @Override
    public ClearMedalsType setOauthToken(java.lang.String oauthToken) {
      return (ClearMedalsType) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearMedalsType setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearMedalsType) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearMedalsType setQuotaUser(java.lang.String quotaUser) {
      return (ClearMedalsType) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearMedalsType setUserIp(java.lang.String userIp) {
      return (ClearMedalsType) super.setUserIp(userIp);
    }

    @Override
    public ClearMedalsType set(String parameterName, Object value) {
      return (ClearMedalsType) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "clearStatus".
   *
   * This request holds the parameters needed by the the clear server.  After setting any optional
   * parameters, call the {@link ClearStatus#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ClearStatus clearStatus() throws java.io.IOException {
    ClearStatus result = new ClearStatus();
    initialize(result);
    return result;
  }

  public class ClearStatus extends ClearRequest<Void> {

    private static final String REST_PATH = "clearStatus";

    /**
     * Create a request for the method "clearStatus".
     *
     * This request holds the parameters needed by the the clear server.  After setting any optional
     * parameters, call the {@link ClearStatus#execute()} method to invoke the remote operation. <p>
     * {@link
     * ClearStatus#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ClearStatus() {
      super(Clear.this, "GET", REST_PATH, null, Void.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ClearStatus setAlt(java.lang.String alt) {
      return (ClearStatus) super.setAlt(alt);
    }

    @Override
    public ClearStatus setFields(java.lang.String fields) {
      return (ClearStatus) super.setFields(fields);
    }

    @Override
    public ClearStatus setKey(java.lang.String key) {
      return (ClearStatus) super.setKey(key);
    }

    @Override
    public ClearStatus setOauthToken(java.lang.String oauthToken) {
      return (ClearStatus) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearStatus setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearStatus) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearStatus setQuotaUser(java.lang.String quotaUser) {
      return (ClearStatus) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearStatus setUserIp(java.lang.String userIp) {
      return (ClearStatus) super.setUserIp(userIp);
    }

    @Override
    public ClearStatus set(String parameterName, Object value) {
      return (ClearStatus) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "clearUserApi".
   *
   * This request holds the parameters needed by the the clear server.  After setting any optional
   * parameters, call the {@link ClearUserApi#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ClearUserApi clearUserApi() throws java.io.IOException {
    ClearUserApi result = new ClearUserApi();
    initialize(result);
    return result;
  }

  public class ClearUserApi extends ClearRequest<Void> {

    private static final String REST_PATH = "clearUserApi";

    /**
     * Create a request for the method "clearUserApi".
     *
     * This request holds the parameters needed by the the clear server.  After setting any optional
     * parameters, call the {@link ClearUserApi#execute()} method to invoke the remote operation. <p>
     * {@link
     * ClearUserApi#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ClearUserApi() {
      super(Clear.this, "GET", REST_PATH, null, Void.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ClearUserApi setAlt(java.lang.String alt) {
      return (ClearUserApi) super.setAlt(alt);
    }

    @Override
    public ClearUserApi setFields(java.lang.String fields) {
      return (ClearUserApi) super.setFields(fields);
    }

    @Override
    public ClearUserApi setKey(java.lang.String key) {
      return (ClearUserApi) super.setKey(key);
    }

    @Override
    public ClearUserApi setOauthToken(java.lang.String oauthToken) {
      return (ClearUserApi) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearUserApi setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearUserApi) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearUserApi setQuotaUser(java.lang.String quotaUser) {
      return (ClearUserApi) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearUserApi setUserIp(java.lang.String userIp) {
      return (ClearUserApi) super.setUserIp(userIp);
    }

    @Override
    public ClearUserApi set(String parameterName, Object value) {
      return (ClearUserApi) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Clear}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Clear}. */
    @Override
    public Clear build() {
      return new Clear(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ClearRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setClearRequestInitializer(
        ClearRequestInitializer clearRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(clearRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
